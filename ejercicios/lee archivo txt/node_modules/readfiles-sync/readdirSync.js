'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

function readdirSync(opt, filesList = []) {
    if (typeof opt === 'string') {
        opt = {
            dir: '',
            baseDir: opt
        };
    }
    if (!opt.baseDir) {
        opt.baseDir = opt.dir;
        opt.dir = '';
    }
    opt = Object.assign({}, {
        relative: true,
        exclude_dir: false,
        ignore: ['.DS_Store', '.git', 'node_modules']
    }, opt);
    const realDir = path__default["default"].join(opt.baseDir, opt.dir);
    const files = fs__default["default"].readdirSync(realDir);
    files.forEach((item) => {
        if (!opt.ignore.includes(item)) {
            const basePath = path__default["default"].join(opt.dir, item);
            const fullPath = path__default["default"].join(realDir, item);
            const stat = fs__default["default"].statSync(fullPath);
            if (stat.isDirectory()) {
                const newOpt = Object.assign({}, opt);
                newOpt.dir = basePath;
                readdirSync(newOpt, filesList);
                if (opt.exclude_dir) {
                    return true
                }
            }
            filesList.push(opt.relative ? basePath : fullPath);
        }
    });
    return filesList
}

function readfilesSync(opt, filesList = []) {
    if (typeof opt === 'string') {
        opt = {
            dir: opt
        };
    }
    opt.exclude_dir = true;
    return readdirSync(opt, filesList)
}

exports["default"] = readfilesSync;
exports.readdirSync = readdirSync;
exports.readfilesSync = readfilesSync;
